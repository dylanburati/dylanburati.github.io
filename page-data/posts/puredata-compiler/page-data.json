{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/puredata-compiler/","result":{"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This post is about a tool I created for writing PureData patches as Python\nprograms. The current version is on "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/dylanburati/puredata-compiler"},"children":[{"type":"text","value":"Github"}]},{"type":"text","value":" and "},{"type":"element","tagName":"a","properties":{"href":"https://pypi.org/project/puredata-compiler"},"children":[{"type":"text","value":"PyPI"}]},{"type":"text","value":" (supports\nPython 3.5 and later)."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"background","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#background","ariaLabel":"background permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Background"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In late March 2019, I began writing an audio app for Android, similar to\nGarageBand on iOS. The purpose of the app is to create and play instruments\nbased on "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"samples"}]},{"type":"text","value":" - short audio clips that the user can map to different keys\non a virtual keyboard. I chose PureData as the audio library after several\nGoogle searches, and with the help of the excellent "},{"type":"element","tagName":"a","properties":{"href":"http://pd-tutorial.com"},"children":[{"type":"text","value":"pd-tutorial.com"}]},{"type":"text","value":",\nused the built-in GUI to write a patch to read a .wav file and play it back."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"terminology","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#terminology","ariaLabel":"terminology permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Terminology"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Patch"}]},{"type":"text","value":": a program that the user writes graphically, which PureData runs"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"patches generally run until they are force closed, generating audio in\nresponse to user input"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Object"}]},{"type":"text","value":": a \"node\" in the patch, which performs some operation based on its\ntype and content"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"different object types are represented as different shapes"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"the most common types have a user-defined string as their content"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Inlet"}]},{"type":"text","value":": the input slot(s) on the top of an object"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Outlet"}]},{"type":"text","value":": the output slot(s) on the bottom of an object"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Connection (wire)"}]},{"type":"text","value":": an \"edge\" in the patch, which must start at an outlet\nand end at an inlet. These visually represent the data flow of the program."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Inlets and outlets can have multiple connections each"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/assets/puredata-patch-example.png","alt":"Example Patch"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example Patch"}]},{"type":"text","value":": plays a sine wave at 440 Hz on both stereo channels"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"compiler-attempt-1","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#compiler-attempt-1","ariaLabel":"compiler attempt 1 permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Compiler Attempt 1"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I built on my first patch to add a pitch parameter, but I did not make much\nprogress, since every change required a mouse action. I decided I would be more\nproductive using a text-based language for PureData. I found the .pd file format\ndocs "},{"type":"element","tagName":"a","properties":{"href":"https://puredata.info/docs/developer/PdFileFormat"},"children":[{"type":"text","value":"here"}]},{"type":"text","value":" and wrote the first draft of my compiler."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I ended up with a 550 line program, with the \"source\" to compile from in a long\nmultiline string at the top. The following is an excerpt:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"from typing import *\nimport re\n\nsample = '''\ndef reactive_expr2\nobj reactor{local} = \"trigger bang float\" ({2})\nobj {3} = \"{0}\" ({1} reactor{local}$1, reactor{local}$2)\nend\n\narray array1 = \"array1\" ()\n\nobj panel = \"receive sample_file\" ()\nmsg reader = \"read -resize \\$1 array1\" (panel$1)\nobj soundfiler = \"soundfiler\" (reader$1)\nfloatatom lenSamples = \"\" (soundfiler$1)\n\n# ... playback array1\n'''\n# ... regex parsing utilities\n\ndef compile(s_commented, filename, subpatches=None, include_canvas=True):\n    s = '\\n'.join([read_to_delimiter(commented_line, 0, '#')[0] for commented_line in s_commented.splitlines()])\n    start_idx = 0\n    base_x = 25\n    base_y = 25\n    current_x = base_x\n    current_y = base_y\n    line_step = 0  # type=0 identifier=1 text=2 wiring=3 funcdef=10 funccall=20 error=-1\n    if subpatches is None:\n        subpatches = {}\n    lines = []\n    connections = []\n    functions = {}\n    pending_connections = {}\n    current_fn = None\n    while start_idx >= 0:\n        if line_step == 0:\n            # parse stuff, increase start_idx,\n            # do stuff, update line_step, repeat\n        elif line_step == 1:\n            # ...\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"attempt-2","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#attempt-2","ariaLabel":"attempt 2 permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Attempt 2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After I had worked with my hacked-together version for a while, I identified\nsome pros and cons."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"span","properties":{"className":["font-bold","text-lg","text-green-500"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":"\nthings can have variable names"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"span","properties":{"className":["font-bold","text-lg","text-red-500"]},"children":[{"type":"text","value":"−"}]},{"type":"text","value":"\ncommas and dollar signs need to be escaped manually"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"span","properties":{"className":["font-bold","text-lg","text-red-500"]},"children":[{"type":"text","value":"−"}]},{"type":"text","value":"\nno autocomplete or syntax highlighting"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"span","properties":{"className":["font-bold","text-lg","text-red-500"]},"children":[{"type":"text","value":"−"}]},{"type":"text","value":"\nthe parser is a giant switch statement"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"span","properties":{"className":["font-bold","text-lg","text-red-500"]},"children":[{"type":"text","value":"−"}]},{"type":"text","value":"\nno support for loops, which would be helpful to create many\nsimilar objects"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"span","properties":{"className":["font-bold","text-lg","text-red-500"]},"children":[{"type":"text","value":"−"}]},{"type":"text","value":"\nthe parser assumes each object constructor takes one string and a list of\nconnections"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"floatatom"}]},{"type":"text","value":" ignores the string"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"array"}]},{"type":"text","value":" converts the string to a positive integer"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With the last two, I realized that I should have written the compiler as a\nPython library, and more importantly I should have designed it so that people\ncould actually use it."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the second version, I moved the task of building a patch into a class, which\nkeeps track of each element's content, position and size. The different types of\nPureData objects also became classes, which are constructed with only the data\nthey need. Python's ability to overload indexers via "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"__getitem__"}]},{"type":"text","value":" made it\neasy to refer to outlets as integer-keyed properties of their owner objects."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"example-usage","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#example-usage","ariaLabel":"example usage permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Example Usage"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"from puredata_compiler import Patch, write_file\n\n\ndef example():\n    \"\"\"Patch that increments a counter\"\"\"\n    patch = Patch()\n    obj, msg, floatatom, connect = patch.get_creators('obj, msg, floatatom, connect')\n\n    bang = msg('bang')\n    delay_params = msg('500', new_row=0, new_col=1)\n    delay_trig = obj('t b f', delay_params[0])\n    delay = obj('delay', delay_trig[0], delay_trig[1])\n\n    start_val = obj('f', (bang[0], delay[0]), x_pos=25, y_pos=125)\n    increment = floatatom(new_row=0)\n    current_val = obj('+', start_val[0], increment[0])\n    # connect is different - it takes an existing element and adds connections,\n    # so you can create circular structures\n    connect(start_val, (), current_val[0])\n    current_val_display = floatatom(current_val[0])\n\n    return patch\n\nif __name__ == \"__main__\":\n    pd_example = example()\n    write_file('pd_example.pd', str(pd_example))\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"result","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#result","ariaLabel":"result permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Result"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/assets/puredata-compiler1.png","alt":"pd_example.pd"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"future-improvements","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#future-improvements","ariaLabel":"future improvements permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Future improvements"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is the first Python project that I've written using "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/typing.html"},"children":[{"type":"text","value":"type hints"}]},{"type":"text","value":",\nand I was impressed by their descriptive power. The type checker caught many of\nmy errors right away, and writing the signatures and docstrings for each\nfunction forced me to think about possible design issues."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since having a type system was so beneficial in writing this compiler, I think\nit would be nice to implement one for PureData, which often generates type\nerrors like \"signal outlet connected to nonsignal inlet\". This would be\ndifficult though, because the number of inlets or outlets an object has can\nchange based on its text content."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Support for more complex PureData elements could be added fairly easily - I only\nincluded the bare minimum because my Android app works with\n"},{"type":"element","tagName":"a","properties":{"href":"https://github.com/libpd/pd-for-android"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"libpd"}]}]},{"type":"text","value":", and the patch is never seen\nby users."}]}],"data":{"quirksMode":false}},"tableOfContents":"<ul>\n<li>\n<p><a href=\"/posts/puredata-compiler/#background\">Background</a></p>\n<ul>\n<li><a href=\"/posts/puredata-compiler/#terminology\">Terminology</a></li>\n</ul>\n</li>\n<li><a href=\"/posts/puredata-compiler/#compiler-attempt-1\">Compiler Attempt 1</a></li>\n<li>\n<p><a href=\"/posts/puredata-compiler/#attempt-2\">Attempt 2</a></p>\n<ul>\n<li><a href=\"/posts/puredata-compiler/#example-usage\">Example Usage</a></li>\n<li><a href=\"/posts/puredata-compiler/#result\">Result</a></li>\n</ul>\n</li>\n<li><a href=\"/posts/puredata-compiler/#future-improvements\">Future improvements</a></li>\n</ul>","frontmatter":{"title":"PureData Compiler","author":"Dylan Burati","date":"Sep 30, 2019"}}},"pageContext":{"slug":"/posts/puredata-compiler/"}}}