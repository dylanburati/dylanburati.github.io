{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/puredata-compiler/","webpackCompilationHash":"6d10de1758904a2198dd","result":{"data":{"markdownRemark":{"html":"<p>This post is about a tool I created for writing PureData patches as Python\nprograms. The current version is on <a href=\"https://github.com/dylanburati/puredata-compiler\">Github</a> and <a href=\"https://pypi.org/project/puredata-compiler\">PyPI</a> (supports\nPython 3.5 and later).</p>\n<h2>Background</h2>\n<p>In late March 2019, I began writing an audio app for Android, similar to\nGarageBand on iOS. The purpose of the app is to create and play instruments\nbased on <em>samples</em> - short audio clips that the user can map to different keys\non a virtual keyboard. I chose PureData as the audio library after several\nGoogle searches, and with the help of the excellent <a href=\"http://pd-tutorial.com\">pd-tutorial.com</a>,\nused the built-in GUI to write a patch to read a .wav file and play it back.</p>\n<h3>Terminology</h3>\n<ul>\n<li>\n<p><strong>Patch</strong>: a program that the user writes graphically, which PureData runs</p>\n<ul>\n<li>patches generally run until they are force closed, generating audio in\nresponse to user input</li>\n</ul>\n</li>\n<li>\n<p><strong>Object</strong>: a \"node\" in the patch, which performs some operation based on its\ntype and content</p>\n<ul>\n<li>different object types are represented as different shapes</li>\n<li>the most common types have a user-defined string as their content</li>\n</ul>\n</li>\n<li><strong>Inlet</strong>: the input slot(s) on the top of an object</li>\n<li><strong>Outlet</strong>: the output slot(s) on the bottom of an object</li>\n<li>\n<p><strong>Connection (wire)</strong>: an \"edge\" in the patch, which must start at an outlet\nand end at an inlet. These visually represent the data flow of the program.</p>\n<ul>\n<li>Inlets and outlets can have multiple connections each</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/assets/puredata-patch-example.png\" alt=\"Example Patch\">\n<strong>Example Patch</strong>: plays a sine wave at 440 Hz on both stereo channels</p>\n<h2>Compiler Attempt 1</h2>\n<p>I built on my first patch to add a pitch parameter, but I did not make much\nprogress, since every change required a mouse action. I decided I would be more\nproductive using a text-based language for PureData. I found the .pd file format\ndocs <a href=\"https://puredata.info/docs/developer/PdFileFormat\">here</a> and wrote the first draft of my compiler.</p>\n<p>I ended up with a 550 line program, with the \"source\" to compile from in a long\nmultiline string at the top. The following is an excerpt:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> re\n\nsample <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''\ndef reactive_expr2\nobj reactor{local} = \"trigger bang float\" ({2})\nobj {3} = \"{0}\" ({1} reactor{local}$1, reactor{local}$2)\nend\n\narray array1 = \"array1\" ()\n\nobj panel = \"receive sample_file\" ()\nmsg reader = \"read -resize \\$1 array1\" (panel$1)\nobj soundfiler = \"soundfiler\" (reader$1)\nfloatatom lenSamples = \"\" (soundfiler$1)\n\n# ... playback array1\n'''</span>\n<span class=\"token comment\"># ... regex parsing utilities</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>s_commented<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">,</span> subpatches<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> include_canvas<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    s <span class=\"token operator\">=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>read_to_delimiter<span class=\"token punctuation\">(</span>commented_line<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> commented_line <span class=\"token keyword\">in</span> s_commented<span class=\"token punctuation\">.</span>splitlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    start_idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    base_x <span class=\"token operator\">=</span> <span class=\"token number\">25</span>\n    base_y <span class=\"token operator\">=</span> <span class=\"token number\">25</span>\n    current_x <span class=\"token operator\">=</span> base_x\n    current_y <span class=\"token operator\">=</span> base_y\n    line_step <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># type=0 identifier=1 text=2 wiring=3 funcdef=10 funccall=20 error=-1</span>\n    <span class=\"token keyword\">if</span> subpatches <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        subpatches <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    lines <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    connections <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    functions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    pending_connections <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    current_fn <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">while</span> start_idx <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> line_step <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># parse stuff, increase start_idx,</span>\n            <span class=\"token comment\"># do stuff, update line_step, repeat</span>\n        <span class=\"token keyword\">elif</span> line_step <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># ...</span></code></pre></div>\n<h2>Attempt 2</h2>\n<p>After I had worked with my hacked-together version for a while, I identified\nsome pros and cons.</p>\n<ul>\n<li><span class=\"font-bold text-lg text-green-500\">+</span>\nthings can have variable names</li>\n<li><span class=\"font-bold text-lg text-red-500\">−</span>\ncommas and dollar signs need to be escaped manually</li>\n<li><span class=\"font-bold text-lg text-red-500\">−</span>\nno autocomplete or syntax highlighting</li>\n<li><span class=\"font-bold text-lg text-red-500\">−</span>\nthe parser is a giant switch statement</li>\n<li><span class=\"font-bold text-lg text-red-500\">−</span>\nno support for loops, which would be helpful to create many\nsimilar objects</li>\n<li>\n<p><span class=\"font-bold text-lg text-red-500\">−</span>\nthe parser assumes each object constructor takes one string and a list of\nconnections</p>\n<ul>\n<li><code class=\"language-text\">floatatom</code> ignores the string</li>\n<li><code class=\"language-text\">array</code> converts the string to a positive integer</li>\n</ul>\n</li>\n</ul>\n<p>With the last two, I realized that I should have written the compiler as a\nPython library, and more importantly I should have designed it so that people\ncould actually use it.</p>\n<p>In the second version, I moved the task of building a patch into a class, which\nkeeps track of each element's content, position and size. The different types of\nPureData objects also became classes, which are constructed with only the data\nthey need. Python's ability to overload indexers via <code class=\"language-text\">__getitem__</code> made it\neasy to refer to outlets as integer-keyed properties of their owner objects.</p>\n<h3>Example Usage</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> puredata_compiler <span class=\"token keyword\">import</span> Patch<span class=\"token punctuation\">,</span> write_file\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Patch that increments a counter\"\"\"</span>\n    patch <span class=\"token operator\">=</span> Patch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    obj<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> floatatom<span class=\"token punctuation\">,</span> connect <span class=\"token operator\">=</span> patch<span class=\"token punctuation\">.</span>get_creators<span class=\"token punctuation\">(</span><span class=\"token string\">'obj, msg, floatatom, connect'</span><span class=\"token punctuation\">)</span>\n\n    bang <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">(</span><span class=\"token string\">'bang'</span><span class=\"token punctuation\">)</span>\n    delay_params <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">(</span><span class=\"token string\">'500'</span><span class=\"token punctuation\">,</span> new_row<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> new_col<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    delay_trig <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">(</span><span class=\"token string\">'t b f'</span><span class=\"token punctuation\">,</span> delay_params<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    delay <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">(</span><span class=\"token string\">'delay'</span><span class=\"token punctuation\">,</span> delay_trig<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> delay_trig<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    start_val <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">(</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>bang<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x_pos<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> y_pos<span class=\"token operator\">=</span><span class=\"token number\">125</span><span class=\"token punctuation\">)</span>\n    increment <span class=\"token operator\">=</span> floatatom<span class=\"token punctuation\">(</span>new_row<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    current_val <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">(</span><span class=\"token string\">'+'</span><span class=\"token punctuation\">,</span> start_val<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> increment<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># connect is different - it takes an existing element and adds connections,</span>\n    <span class=\"token comment\"># so you can create circular structures</span>\n    connect<span class=\"token punctuation\">(</span>start_val<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> current_val<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    current_val_display <span class=\"token operator\">=</span> floatatom<span class=\"token punctuation\">(</span>current_val<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> patch\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    pd_example <span class=\"token operator\">=</span> example<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    write_file<span class=\"token punctuation\">(</span><span class=\"token string\">'pd_example.pd'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>pd_example<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Result</h3>\n<p><img src=\"/assets/puredata-compiler1.png\" alt=\"pd_example.pd\"></p>\n<h2>Future improvements</h2>\n<p>This is the first Python project that I've written using <a href=\"https://docs.python.org/3/library/typing.html\">type hints</a>,\nand I was impressed by their descriptive power. The type checker caught many of\nmy errors right away, and writing the signatures and docstrings for each\nfunction forced me to think about possible design issues.</p>\n<p>Since having a type system was so beneficial in writing this compiler, I think\nit would be nice to implement one for PureData, which often generates type\nerrors like \"signal outlet connected to nonsignal inlet\". This would be\ndifficult though, because the number of inlets or outlets an object has can\nchange based on its text content.</p>\n<p>Support for more complex PureData elements could be added fairly easily - I only\nincluded the bare minimum because my Android app works with\n<a href=\"https://github.com/libpd/pd-for-android\"><code class=\"language-text\">libpd</code></a>, and the patch is never seen\nby users.</p>","frontmatter":{"title":"PureData Compiler","author":"Dylan Burati","date":"Sep 30, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/puredata-compiler/"}}}